{"ast":null,"code":"var _jsxFileName = \"/Users/shubhambhardwaj/Practise/Github Desktop/client-management-ui/src/components/OrgChart/OrgChart.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Tree, TreeNode } from \"react-organizational-chart\";\nimport { useNavigate } from \"react-router-dom\";\nimport styles from \"./OrgChart.module.scss\"; // Assuming you're using SCSS\n\n// Data for the tree structure\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst treeData = {\n  name: \"Bank\",\n  route: \"/ceo\",\n  children: [{\n    name: \"Transaction Banking\",\n    route: \"/cto\",\n    children: [{\n      name: \"Payments\",\n      route: \"/\"\n    }, {\n      name: \"Cash Management\",\n      route: \"/\"\n    }, {\n      name: \"Treasury Services\",\n      route: \"/\"\n    }, {\n      name: \"Corporate Lending\",\n      route: \"/\"\n    }, {\n      name: \"Merchant Services\",\n      route: \"/\"\n    }]\n  }, {\n    name: \"Individual Banking\",\n    route: \"/cfo\",\n    children: [{\n      name: \"Digital Banking\",\n      route: \"/\"\n    }, {\n      name: \"Investment Services\",\n      route: \"/\"\n    }, {\n      name: \"Wealth Management\",\n      route: \"/\"\n    }]\n  }]\n};\n\n// Recursive component for TreeNode\nconst TreeNodeComponent = ({\n  node\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const handleClick = route => {\n    navigate(route);\n  };\n  return /*#__PURE__*/_jsxDEV(TreeNode, {\n    label: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.nodeCard,\n      onClick: () => handleClick(node.route),\n      children: node.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this),\n    children: node.children && node.children.map((child, index) => /*#__PURE__*/_jsxDEV(TreeNodeComponent, {\n      node: child\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n// Main OrgChart component\n_s(TreeNodeComponent, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = TreeNodeComponent;\nexport const OrgChart = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chartContainer,\n    children: /*#__PURE__*/_jsxDEV(Tree, {\n      lineWidth: \"2px\",\n      lineColor: \"#212a31\",\n      lineBorderRadius: \"10px\",\n      label: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.treeRoot,\n        children: \"Banking System\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 16\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(TreeNodeComponent, {\n        node: treeData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_c2 = OrgChart;\nvar _c, _c2;\n$RefreshReg$(_c, \"TreeNodeComponent\");\n$RefreshReg$(_c2, \"OrgChart\");","map":{"version":3,"names":["React","Tree","TreeNode","useNavigate","styles","jsxDEV","_jsxDEV","treeData","name","route","children","TreeNodeComponent","node","_s","navigate","handleClick","label","className","nodeCard","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","child","index","_c","OrgChart","chartContainer","lineWidth","lineColor","lineBorderRadius","treeRoot","_c2","$RefreshReg$"],"sources":["/Users/shubhambhardwaj/Practise/Github Desktop/client-management-ui/src/components/OrgChart/OrgChart.jsx"],"sourcesContent":["import React from \"react\";\nimport { Tree, TreeNode } from \"react-organizational-chart\";\nimport { useNavigate } from \"react-router-dom\";\nimport styles from \"./OrgChart.module.scss\"; // Assuming you're using SCSS\n\n// Data for the tree structure\nconst treeData = {\n  name: \"Bank\",\n  route: \"/ceo\",\n  children: [\n    {\n      name: \"Transaction Banking\",\n      route: \"/cto\",\n      children: [\n        { name: \"Payments\", route: \"/\" },\n        { name: \"Cash Management\", route: \"/\" },\n\n        { name: \"Treasury Services\", route: \"/\" },\n        { name: \"Corporate Lending\", route: \"/\" },\n        { name: \"Merchant Services\", route: \"/\" },\n      ],\n    },\n    {\n      name: \"Individual Banking\",\n      route: \"/cfo\",\n      children: [\n        { name: \"Digital Banking\", route: \"/\" },\n        { name: \"Investment Services\", route: \"/\" },\n\n        { name: \"Wealth Management\", route: \"/\" },\n      ],\n    },\n  ],\n};\n\n// Recursive component for TreeNode\nconst TreeNodeComponent = ({ node }) => {\n  const navigate = useNavigate();\n\n  const handleClick = (route) => {\n    navigate(route);\n  };\n\n  return (\n    <TreeNode\n      label={\n        <div\n          className={styles.nodeCard}\n          onClick={() => handleClick(node.route)}\n        >\n          {node.name}\n        </div>\n      }\n    >\n      {node.children &&\n        node.children.map((child, index) => (\n          <TreeNodeComponent key={index} node={child} />\n        ))}\n    </TreeNode>\n  );\n};\n\n// Main OrgChart component\nexport const OrgChart = () => {\n  return (\n    <div className={styles.chartContainer}>\n      <Tree\n        lineWidth=\"2px\"\n        lineColor=\"#212a31\"\n        lineBorderRadius=\"10px\"\n        label={<div className={styles.treeRoot}>Banking System</div>}\n      >\n        <TreeNodeComponent node={treeData} />\n      </Tree>\n    </div>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}